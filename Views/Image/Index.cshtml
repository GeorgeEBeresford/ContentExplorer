@{
    ViewBag.Title = "Images";
    string baseDirectory = ConfigurationManager.AppSettings["ImagesPath"];
    string cdn = ConfigurationManager.AppSettings["CDNPath"];

    DirectoryInfo relativeDirectory = ViewBag.Directory;
    int currentPage = ViewBag.Page;
    string filter = ViewBag.Filter;
    string baseSiteDirectory = ConfigurationManager.AppSettings["BaseDirectory"];
    string path = relativeDirectory.FullName.Substring(baseSiteDirectory.Length + baseDirectory.Length + 1).Trim("\\/.".ToCharArray());
    int imagesPerPage = ViewBag.ImagesPerPage;
}

@using System.Configuration
@using ContentExplorer.Services
@model ContentExplorer.Models.ViewModels.DirectoryViewModel

@helper RenderSteppingStones(DirectoryInfo parentDirectory, string baseSiteDirectory, string imageDirectory, int page, string filter)
{


    if (parentDirectory.Parent != null && parentDirectory.Parent.FullName != baseSiteDirectory)
    {
        @RenderSteppingStones(parentDirectory.Parent, baseSiteDirectory, imageDirectory, page, filter)
    }
    <a class="steppingstone_item" href="@Url.Action("Index", new { path = parentDirectory.FullName.Substring(baseSiteDirectory.Length + imageDirectory.Length + 1), page = page, filter = filter })">@(parentDirectory.Name)</a>
}

@helper RenderDirectory(DirectoryInfo directory, string cdn, string baseDirectory, string path, string baseSiteDirectory)
{
    ImageThumbnailService videoThumbnailService = new ImageThumbnailService();
    FileInfo previewImage = videoThumbnailService.GetImageThumbnail(directory);

    string thumbnailPath;

    if (previewImage != null)
    {
        string relativeWebPath = previewImage.Directory.FullName.Substring(baseSiteDirectory.Length + baseDirectory.Length + 1).Trim("\\/.".ToCharArray());

        thumbnailPath = Path.Combine(cdn, baseDirectory, relativeWebPath, previewImage.Name).Replace("\\", "/");
    }
    else
    {
        thumbnailPath = "none";
    }


    // Replace characters which break css
    thumbnailPath = thumbnailPath.Replace("'", "%27");

    <li class="directory_item" style="background-image: url('@thumbnailPath'); background-size: cover; background-position: center center">
        <a href="@Url.Action("Index", new { path = Path.Combine(path, directory.Name), ViewBag.Filter })" class="directory_link">
        </a>
        <label class="media_name">
            @directory.Name
            <input type="checkbox" data-tag-selector data-tag-type="directory" data-path="@(directory.FullName)" />
        </label>
    </li>
}

<input data-directory-name type="hidden" value="@(relativeDirectory.FullName)" />

<nav class="steppingstone_list">
    @RenderSteppingStones(relativeDirectory, baseSiteDirectory, baseDirectory, currentPage, filter)
</nav>

<div class="sidebar">

    <h2>Filters</h2>

    @if (filter == "type: gif")
    {
        <a href="@Url.Action("Index", new {path = relativeDirectory, page = currentPage})">
            <label>Animated Gifs: True</label>
        </a>
    }
    else
    {
        <a href="@Url.Action("Index", new {path = relativeDirectory, page = currentPage, filter = "type: gif"})">
            <label>Animated Gifs: False</label>
        </a>
    }

    <label for="txtFilter">
        Custom filter
        <input type="text" id="txtFilter" value="@filter" class="input-sm" data-custom-filter />
        <button style="@(filter != "" ? "display: inline-block" : "display: none")" data-clear-filter>X</button>
    </label>
    <button class="btn btn-default" data-apply-filter>Apply Custom Filter</button>

    <ul class="tagList" data-tags-for-folder>
    </ul>

    @if (Model.FileInfos.Any() || Model.DirectoryInfos.Any())
    {
        <h2>Add Tags</h2>
        <label class="input-group">
            Tag Name
            <input class="input-sm" type="text" data-tag-name />
            <button class="btn btn-default" data-add-tag>Add Tags</button>
        </label>
    }
</div>
<div class="content_sidebar panel">

    @if (Model.FileInfos.Any() || Model.DirectoryInfos.Any())
    {
        <div class="btn-block">
            <button class="btn btn-primary" data-select-all>Select All</button>
            <button class="btn btn-default" data-select-none>Select None</button>
        </div>
    }

    @if (Model.DirectoryInfos.Any())
    {
        <h1>Directories</h1>
        <ul class="directory_list">
            @foreach (DirectoryInfo directory in Model.DirectoryInfos)
            {
                @RenderDirectory(directory, cdn, baseDirectory, path, baseSiteDirectory)
            }
        </ul>
    }

    @if (Model.FileInfos.Any())
    {
        int imageNumber = (currentPage - 1) * imagesPerPage + 1;

        <h1>Images</h1>
        <ul class="media_list">

            @for (int imageIndex = 0; imageIndex < Model.FileInfos.Count; imageIndex++)
            {
                FileInfo image = Model.FileInfos.ElementAt(imageIndex);
                string thumbnailPath = Path.Combine(cdn, baseDirectory, path, image.Name).Replace("\\", "/");

                // Replace characters which break css
                thumbnailPath = thumbnailPath.Replace("'", "%27");

                string linkPath = Url.Action("View", new { path = path, page = imageNumber, filter = filter });

                <li class="media_item" style="background-image: url('@thumbnailPath'); background-size: cover">
                    <a href="@linkPath" class="media_link">
                    </a>
                    <label class="media_name">
                        @image.Name
                        <input type="checkbox" data-tag-selector data-tag-type="file" data-path="@(image.FullName)" />
                    </label>
                </li>

                imageNumber++;
            }
        </ul>
    }

    @if (Model.FileInfos.Any() || Model.DirectoryInfos.Any())
    {
        <div class="btn-block">
            <button class="btn btn-primary" data-select-all>Select All</button>
            <button class="btn btn-default" data-select-none>Select None</button>
        </div>
    }

    @if (Model.FileInfos.Any() == false && Model.DirectoryInfos.Any() == false)
    {
        if (filter == "")
        {
            <h1>No files found</h1>
        }
        else
        {
            <h1>No files found with filter @filter</h1>
        }
    }

    @{
        int maxPages = Model.FileCount / imagesPerPage;
    }

    @if (maxPages > 1)
    {
        <div class="button_wrapper">
            <div class="button_list">
                @for (int pageIndex = 1; pageIndex <= maxPages; pageIndex++)
                {
                    if (pageIndex != currentPage)
                    {
                        <a class="button_item" href="@Url.Action("Index", new { path = relativeDirectory, page = pageIndex, filter = filter })">@pageIndex</a>
                    }
                    else
                    {
                        <div class="button_item-current">@pageIndex</div>
                    }
                }
            </div>
            <div>
                @maxPages Pages total
            </div>
        </div>
    }
</div>

@section scripts {

    @Scripts.Render("~/bundles/image/index")
}